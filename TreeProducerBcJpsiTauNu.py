import ROOT
import math 
import numpy as num 
from TreeProducerCommon import *

class TreeProducerBcJpsiTauNu(TreeProducerCommon):
    """Class to create a custom output file & tree; as well as create and contain branches."""

    def __init__(self, name, dataType, **kwargs):
        print('TreeProducerBsTauTau is called for', name)
        super(TreeProducerBcJpsiTauNu, self).__init__(name,dataType,**kwargs)

        #self.addBranch('gen_pt', 'f')
        #self.addBranch('gen_eta', 'f')
        #self.addBranch('gen_phi', 'f')
        #self.addBranch('gen_z0', 'f')
        #self.addBranch('gen_pdgid', 'f')
        #self.addBranch('gen_mpdgid', 'f')
        #self.addBranch('gen_ntrk', 'i')
        self.addBranch('trk_flag', 'f')
        self.addBranch('trk_dr', 'f')
        #self.addBranch('trk_iso', 'f')
        self.addBranch('trk_pt', 'f')
        self.addBranch('trk_eta', 'f')
        self.addBranch('trk_phi', 'f')
        self.addBranch('trk_z0', 'f')
        self.addBranch('trk_d0', 'f')
        self.addBranch('trk_nstub', 'i')
        self.addBranch('trk_phi_local', 'f')
        self.addBranch('trk_chi2', 'f')
        self.addBranch('trk_chi2dof', 'f') 
        self.addBranch('trk_chi2rphi', 'f')
        self.addBranch('trk_chi2rz', 'f')
        self.addBranch('trk_bendchi2', 'f')
        self.addBranch('trk_MVA', 'f')
        self.addBranch('trk_lhits', 'f')
        self.addBranch('trk_dhits', 'f')
        self.addBranch('trk_seed', 'f')
        self.addBranch('trk_hitpattern', 'f')
        self.addBranch('trk_phiSector', 'f')
        self.addBranch('trk_genuine', 'f')
        self.addBranch('trk_loose', 'f')
        self.addBranch('trk_unknown', 'f')
        self.addBranch('trk_combinatoric', 'f')
        self.addBranch('trk_fake', 'f')
        self.addBranch('trk_matchtp_pdgid', 'f')
        self.addBranch('trk_matchtp_pt', 'f')
        self.addBranch('trk_matchtp_eta', 'f')
        self.addBranch('trk_matchtp_phi', 'f')
        self.addBranch('trk_matchtp_z0', 'f')
        self.addBranch('trk_matchtp_dxy', 'f')
        self.addBranch('trk_gtt_pt', 'f')
        self.addBranch('trk_gtt_eta', 'f')
        self.addBranch('trk_gtt_phi', 'f')
        self.addBranch('trk_gtt_selected_index', 'f')
        self.addBranch('trk_gtt_selected_emulation_index', 'f')
        # self.addBranch('faketrk_dr', 'f')
        # self.addBranch('faketrk_pt', 'f')
        # self.addBranch('faketrk_eta', 'f')
        # self.addBranch('faketrk_phi', 'f')
        # self.addBranch('faketrk_z0', 'f')
        # self.addBranch('faketrk_d0', 'f')
        # self.addBranch('faketrk_nstub', 'i')
        # self.addBranch('faketrk_phi_local', 'f')
        # self.addBranch('faketrk_chi2', 'f')
        # self.addBranch('faketrk_chi2dof', 'f') 
        # self.addBranch('faketrk_chi2rphi', 'f')
        # self.addBranch('faketrk_chi2rz', 'f')
        # self.addBranch('faketrk_bendchi2', 'f')
        # self.addBranch('faketrk_MVA', 'f')
        # self.addBranch('faketrk_lhits', 'f')
        # self.addBranch('faketrk_dhits', 'f')
        # self.addBranch('faketrk_seed', 'f')
        # self.addBranch('faketrk_hitpattern', 'f')
        # self.addBranch('faketrk_phiSector', 'f')
        # self.addBranch('faketrk_genuine', 'f')
        # self.addBranch('faketrk_loose', 'f')
        # self.addBranch('faketrk_unknown', 'f')
        # self.addBranch('faketrk_combinatoric', 'f')
        # self.addBranch('faketrk_fake', 'f')
        # self.addBranch('faketrk_matchtp_pdgid', 'f')
        # self.addBranch('faketrk_matchtp_pt', 'f')
        # self.addBranch('faketrk_matchtp_eta', 'f')
        # self.addBranch('faketrk_matchtp_phi', 'f')
        # self.addBranch('faketrk_matchtp_z0', 'f')
        # self.addBranch('faketrk_matchtp_dxy', 'f')
        # self.addBranch('faketrk_gtt_pt', 'f')
        # self.addBranch('faketrk_gtt_eta', 'f')
        # self.addBranch('faketrk_gtt_phi', 'f')
        # self.addBranch('faketrk_gtt_selected_index', 'f')
        # self.addBranch('faketrk_gtt_selected_emulation_index', 'f')


